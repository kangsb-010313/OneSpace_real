<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="teampage">

<!-- 쿼리문 작성 -->

	<!-- 팀 생성 (teams 테이블) -->
    <insert id="insertTeam" parameterType="com.javaex.vo.TeamVO">
        insert into teams (
            teamName, 
            instaAccount, 
            teamCreatedDate,
            userNo        
        )
        values (
            #{teamName}, 
            #{instaAccount}, 
            now(),
            #{userNo}     
        )
    </insert>

    <!-- 특정 사용자가 가장 마지막에 만든 팀의 ID(teamNo)를 조회하는 쿼리 -->
    <select id="selectNewTeamNo" parameterType="int" resultType="int">
        select max(teamNo)
        from teams
        where userNo = #{userNo}
    </select>
    
    <!-- 팀원 등록 (teamMembers 테이블) - position, status 컬럼 추가 -->
    <insert id="insertTeamMember" parameterType="map">
        insert into teamMembers (
            teamNo, 
            userNo, 
            joinedDate,
            position,
            status
        )
        values (
            #{teamNo}, 
            #{userNo}, 
            now(),
            #{position},
            #{status}
        )
    </insert>
    

    <!-- 유저 번호로 소속된 팀 목록 조회 (teammain aside용) -->
    <!-- teamMembers 테이블은 user와 team의 관계를 정의하는 테이블로 가정 -->
	<select id="selectTeamsByUserNo" parameterType="int" resultType="com.javaex.vo.TeamVO">
	    <![CDATA[
	        select  t.teamNo,
	                t.teamName
	        from teams t, teamMembers tm 
	        where t.teamNo = tm.teamNo
	        and tm.userNo = #{userNo}
	        and tm.status = '승인'
	        order by t.teamName asc
	    ]]>
	</select>


    <!-- 유저가 소속된 모든 팀의 게시글 조회 (teammain content용) -->
	<select id="selectPostsByUserTeams" parameterType="int" resultType="com.javaex.vo.TeamPostVO">
	    <![CDATA[
	        select  p.teamPostNo,
	                p.teamNo,
	                p.userNo,
	                p.teamPostType,
	                p.teamPostTitle,
	                date_format(p.teamWriteDate, '%Y-%m-%d') as teamWriteDate,
	                t.teamName
	        from posts p
	        join teams t on p.teamNo = t.teamNo
	        where p.teamNo in (select teamNo 
	                           from teamMembers   
	                           where userNo = #{userNo}
	                           and status = '승인')
	        order by p.teamWriteDate desc, p.teamPostNo desc
	    ]]>
	</select>





	<!-- 팀페이지 리스트(팀선택시) -->
	<select id="selectListByTeamNo" parameterType="int" resultType="com.javaex.vo.TeamPostVO">
		<![CDATA[
			SELECT  p.teamPostNo,
                    p.teamNo,
                    p.userNo,
                    p.teamPostType,
                    p.teamPostTitle,
                    p.teamContent,
                    date_format(p.teamWriteDate, '%Y-%m-%d') as teamWriteDate,
                    date_format(p.teamUpdateDate, '%Y-%m-%d') as teamUpdateDate,
                    u.userName,   -- users 테이블에서 작성자 이름 가져오기
                    t.teamName    -- teams 테이블에서 팀 이름 가져오기
            from posts p
            join users u on p.userNo = u.userNo
            join teams t on p.teamNo = t.teamNo
            where p.teamNo = #{teamNo}
            order by p.teamWriteDate desc, p.teamPostNo desc
		]]>
	</select>
	
	
    <!-- 모든 팀 목록 조회 -->
    <select id="selectAllTeams" resultType="com.javaex.vo.TeamVO">
        <![CDATA[
            select teamNo, teamName
            from teams
            order by teamName asc
        ]]>
    </select>

    <!-- 특정 팀 정보 조회 (팀 이름 등을 가져올 때 사용) -->
    <select id="selectTeamInfoByNo" parameterType="int" resultType="com.javaex.vo.TeamVO">
        <![CDATA[
            select teamNo, teamName, instaAccount, teamCreatedDate
            from teams
            where teamNo = #{teamNo}
        ]]>
    </select>
    
    
    <!-- 게시글 상세 조회, 수정폼 -->
    <select id="selectPostByNo" parameterType="int" resultType="com.javaex.vo.TeamPostVO">
        <![CDATA[
            select  p.teamPostNo,
                    p.teamNo,
                    p.userNo,
                    p.teamPostType,
                    p.teamPostTitle,
                    p.teamContent,
                    date_format(p.teamWriteDate, '%Y-%m-%d') as teamWriteDate,
                    date_format(p.teamUpdateDate, '%Y-%m-%d') as teamUpdateDate,
                    u.userName,
                    t.teamName,
                    t.instaAccount
            from posts p
            join users u ON p.userNo = u.userNo
            join teams t ON p.teamNo = t.teamNo
            where p.teamPostNo = #{teamPostNo}
        ]]>
    </select>
    

	<!-- 팀페이지 글 등록 -->
	<insert id="insert" parameterType="com.javaex.vo.TeamPostVO">
		<![CDATA[
			insert into posts(teamPostNo, teamNo, teamPostType, teamPostTitle, teamContent, teamWriteDate, userNo)
			values(null, #{teamNo}, #{teamPostType}, #{teamPostTitle}, #{teamContent}, now(), #{userNo})
		]]>
	</insert>
	
	<!-- 특정 유저가 가장 마지막에 등록한 게시글의 번호를 가져오는 쿼리 -->
	<select id="selectLastPostNo" parameterType="int" resultType="int">
	    <![CDATA[
	        select max(teamPostNo)
	        from posts
	        where userNo = #{userNo}
	    ]]>
	</select>
	
	<!-- 첨부파일 정보 저장 쿼리 (이전과 동일) -->
	<insert id="insertAttachment" parameterType="com.javaex.vo.TeamAttachmentsVO">
	    <![CDATA[
	        insert into teamAttachments (
	            postNo, teamStoredFileName, teamOriginFileName, teamFilePath, 
	            teamFileCreatedDate, teamFileUpdateDate
	        ) values (
	            #{postNo}, #{teamStoredFileName}, #{teamOriginFileName}, #{teamFilePath},
	            now(), now()
	        )
	    ]]>
	</insert>
	
	<!-- 특정 게시글에 속한 모든 첨부파일 목록 조회 -->
	<select id="selectAttachmentsByPostNo" parameterType="int" resultType="com.javaex.vo.TeamAttachmentsVO">
	    <![CDATA[
	        select  teamfileNo,
	                postNo,
	                teamStoredFileName,
	                teamOriginFileName,
	                teamFilePath
	        from teamAttachments
	        where postNo = #{postNo}
	        order by teamfileNo ASC
	    ]]>
	</select>
	
	<!-- 게시글 수정 -->
    <update id="update" parameterType="com.javaex.vo.TeamPostVO">
        <![CDATA[
            update posts
            set teamPostType = #{teamPostType},
                teamPostTitle = #{teamPostTitle},
                teamContent = #{teamContent},
                teamUpdateDate = now()
            where teamPostNo = #{teamPostNo}
        ]]>
    </update>
	
	
    <!-- 게시글 삭제 -->
    <delete id="delete" parameterType="int">
        <![CDATA[
            delete from posts
            where teamPostNo = #{teamPostNo}
        ]]>
    </delete>

	<!-- 특정 게시글의 모든 첨부파일 삭제 -->
	<delete id="deleteAttachmentsByPostNo" parameterType="int">
	    <![CDATA[
	        delete from teamAttachments
	        where postNo = #{postNo}
	    ]]>
	</delete>
    
    
	<!-- 투표 만들기를 위해 사용자의 '찜 목록'에 있는 연습실 정보 가져오기 -->
	<select id="selectWishlistForVote" parameterType="int" resultType="com.javaex.vo.TeamVoteOptionVO">
	    <![CDATA[
	        select
	            s.spacesNo,
	            s.spaceName,
	            s.address,
	            r.roomNo,
	            r.roomName,
	            r.area,
	            r.capacity
	        from
	            studioWishlist w  -- 찜 목록 테이블에서 시작
	        join
	            rooms r ON w.roomNo = r.roomNo
	        join
	            spaces s ON r.spacesNo = s.spacesNo
	        where
	            w.userNo = #{userNo} -- 로그인한 사용자의 찜 목록만 조회
	        order by
	            w.studioWishlistNo DESC -- 가장 최근에 찜한 순서대로
	    ]]>
	</select>

	<!-- 특정 팀(teamNo)에 특정 유저(userNo)가 속해있는지 확인 -->
	<select id="selectMemberCount" parameterType="map" resultType="int">
		select count(*)
		from teamMembers
		where userNo = #{userNo}
		  and teamNo = #{teamNo}
		  and status = '승인'
	</select>
    
    
    <!-- 특정 팀의 첫 게시글 번호(teamPostNo의 최소값)를 조회 -->
	<select id="selectFirstPostNo" parameterType="int" resultType="java.lang.Integer">
	    select min(teamPostNo)
	    from posts
	    where teamNo = #{teamNo}
	</select>
	
	
	<!-- 팀원 관리: 특정 팀의 모든 멤버 정보 조회 (users 테이블과 JOIN) -->
	<select id="selectMembersByTeamNo" parameterType="int" resultType="com.javaex.vo.TeamMemberVO">
	    select
	        tm.teamMemberNo,
	        tm.teamNo,
	        tm.userNo,
	        u.userName,  -- users 테이블에서 이름 가져오기
	        tm.position,
	        tm.status,
	        date_format(tm.joinedDate, '%Y-%m-%d') as joinedDate -- 날짜 형식을 YYYY-MM-DD로 지정
	    from teamMembers tm
	    join users u on tm.userNo = u.userNo
	    where tm.teamNo = #{teamNo}
	    order by
	        case
	            when tm.position = '팀장' THEN 1
	            when tm.status = '승인' THEN 2
	            else 3
	        end,
	        tm.joinedDate asc,
	        u.userName asc
	</select>
	
	<!-- 특정 유저가 특정 팀의 '팀장'인지 확인하는 쿼리 -->
	<select id="isUserTeamLeader" parameterType="map" resultType="int">
	    select count(*)
	    from teamMembers
	    where userNo = #{userNo}
	      and teamNo = #{teamNo}
	      and position = '팀장'
	</select>
	
	<!-- 팀원 관리: 가입 신청 승인 (상태를 '승인'으로, 가입일을 오늘 날짜로 변경) -->
	<update id="updateMemberStatus" parameterType="map">
	    update teamMembers
	    set status = #{status},
	        joinedDate = curdate() 
	    where userNo = #{userNo}
	      and teamNo = #{teamNo}
	</update>
	
	<!-- 팀원 관리: 가입 거부 또는 멤버 삭제 -->
	<delete id="deleteMember" parameterType="map">
	    delete from teamMembers
	    where userNo = #{userNo}
	      and teamNo = #{teamNo}
	</delete>
	
	
	<!-- 투표 만들기를 위해 날짜/시간이 지정된 후보 목록을 조회하는 쿼리 (roomAttachments 테이블 사용) -->
    <select id="selectVoteCandidates" parameterType="int" resultType="com.javaex.vo.TeamVotePostVO">
        select
            v.voteNo, 
            r.roomNo, 
            s.spaceName, 
            r.roomName, 
            v.totalPrice,
            SUBSTRING_INDEX(SUBSTRING_INDEX(s.address, ' ', 2), ' ', -1) as address,
            vo.voteDate, 
            min(vo.voteTime) as startTime,
            TIME_FORMAT(ADDTIME(MAX(vo.voteTime), '01:00:00'), '%H:%i') AS endTime,
            (select storedFileName from roomAttachments where roomNo = r.roomNo LIMIT 1) as picturesNo,
            (
                select group_concat( case when fi.facilityName = '블루투스 스피커' then '스피커' else fi.facilityName END SEPARATOR ', ')
                from spacesGuide sg 
                join facilityInfo fi on sg.facilityNo = fi.facilityNo
                where sg.spacesNo = s.spacesNo and fi.facilityName in ('주차', '조명', '블루투스 스피커')
            ) as spacesGuideNo,
            (
                select count(DISTINCT v2.userNo) 
                from voteOptions vo2 
                join votes v2 ON vo2.voteNo = v2.voteNo
                where vo2.roomNo = vo.roomNo 
                and vo2.voteDate = vo.voteDate 
                and vo2.voteTime = vo.voteTime 
                and v2.postNo is not null
            ) as competitionCount
        from votes v
        join voteOptions vo ON v.voteNo = vo.voteNo
        join rooms r ON vo.roomNo = r.roomNo
        join spaces s ON r.spacesNo = s.spacesNo
        where v.userNo = #{userNo} AND v.postNo IS NULL AND vo.voteStatus = 0
        group by v.voteNo, s.spaceName, r.roomName, r.roomNo, s.address, vo.voteDate, v.totalPrice
        order by vo.voteDate, startTime
    </select>
	
	
	<!-- postNo로 해당 게시글의 투표 후보 목록 조회  -->
    <select id="selectVoteOptionsByPostNo" parameterType="int" resultType="com.javaex.vo.TeamVotePostVO">
	    select
	        v.voteNo,
	        s.spaceName,
	        r.roomName,
	        r.roomNo,
	        SUBSTRING_INDEX(SUBSTRING_INDEX(s.address, ' ', 2), ' ', -1) AS address,
	        vo.voteDate,
	        min(vo.voteTime) as startTime,
	        TIME_FORMAT(ADDTIME(MAX(vo.voteTime), '01:00:00'), '%H:%i') AS endTime,
	        v.totalPrice,
	        (select storedFileName FROM roomAttachments WHERE roomNo = r.roomNo LIMIT 1) AS picturesNo,
	        (
	            select group_concat(
	                CASE WHEN fi.facilityName = '블루투스 스피커' THEN '스피커' ELSE fi.facilityName END
	                SEPARATOR ', ')
	            from spacesGuide sg join facilityInfo fi on sg.facilityNo = fi.facilityNo
	            where sg.spacesNo = s.spacesNo and fi.facilityName in ('주차', '조명', '블루투스 스피커')
	        ) as spacesGuideNo,
	
	        /* (핵심) 이 후보의 시간과 겹치는 '등록된 다른 투표'가 몇 팀인지 계산 */
	        (
	            select count(DISTINCT v2.userNo)
	            from votes v2
	            join voteOptions vo2 ON v2.voteNo = vo2.voteNo
	            where v2.postNo IS NOT NULL      /* 이미 등록된 투표 중에서 */
	              and v2.postNo != v.postNo      /* 이 게시글이 아닌 다른 게시글이 */
	              and vo2.roomNo = r.roomNo      /* 같은 연습실, */
	              and vo2.voteDate = vo.voteDate /* 같은 날짜에 */
	              and EXISTS (                   /* 겹치는 시간이 하나라도 존재하는 경우 */
	                  select 1
	                  from voteOptions vo_current
	                  where vo_current.voteNo = v.voteNo
	                    and vo_current.voteTime = vo2.voteTime
	              )
	        ) + 1 as competitionCount /* 자기 자신을 포함해야 하므로 +1 */
	
	    from votes v
	    join voteOptions vo ON v.voteNo = vo.voteNo
	    join rooms r ON vo.roomNo = r.roomNo
	    join spaces s ON r.spacesNo = s.spacesNo
	    	where v.postNo = #{postNo}
	    group by v.voteNo, s.spaceName, r.roomName, r.roomNo, s.address, vo.voteDate, v.totalPrice
	    order by vo.voteDate, startTime
	</select>
	

	<!-- 1. votes 테이블에 postNo 업데이트 -->
	<update id="updatePostNoInVotes" parameterType="map">
	    update votes
	    set postNo = #{postNo}
	    where voteNo IN
	    <!-- collection에 Map의 key인 "voteNoList"를 명시 -->
	    <foreach item="voteNo" index="index" collection="voteNoList" open="(" separator="," close=")">
	        #{voteNo}
	    </foreach>
	</update>
	
	<!-- 2. voteOptions 테이블의 status를 1(투표중)로 업데이트 -->
	<update id="updateStatusInVoteOptions" parameterType="map">
	    update voteOptions
	    set voteStatus = 1
	    where voteNo IN
	    <!-- collection에 Map의 key인 "voteNoList"를 명시 -->
	    <foreach item="voteNo" index="index" collection="voteNoList" open="(" separator="," close=")">
	        #{voteNo}
	    </foreach>
	</update>
	
	<!-- ==================== 투표 기능 관련 쿼리 ==================== -->
	<!-- voteResults 테이블에 투표 기록 추가 -->
    <insert id="insertVoteResult" parameterType="map">
        insert into voteResults (votedNo, voteNo, userNo, votedTime)
        values (null, #{voteNo}, #{userNo}, now())
    </insert>

	<!-- 특정 투표 후보(voteNo)에 투표한 모든 사람의 이름 조회 -->
    <select id="selectVotersByVoteNo" parameterType="int" resultType="com.javaex.vo.TeamVoteResultVO">
        select u.userNo, u.userName from voteResults vr join users u on vr.userNo = u.userNo
        where vr.voteNo = #{voteNo} 
        order by vr.votedTime asc
    </select>
    
    <!-- 특정 유저가 특정 '후보(voteNo)'에 투표했는지 카운트 -->
	<select id="checkIfUserVotedForOption" parameterType="map" resultType="int">
	    select count(*)
	    from voteResults
	    where userNo = #{userNo}
	      and voteNo = #{voteNo}
	</select>
	
	<!-- 특정 유저가 특정 '게시글(postNo)'에서 투표한 모든 voteNo 리스트 조회 -->
	<select id="selectUserVotedOptionsInPost" parameterType="map" resultType="int">
	    select vr.voteNo
	    from voteResults vr
	    join votes v on vr.voteNo = v.voteNo
	    where vr.userNo = #{userNo}
	      and v.postNo = #{postNo}
	</select>
	
	<!-- '투표 취소'를 위해 voteResults 테이블에서 특정 투표 기록 삭제 -->
	<delete id="deleteVoteResult" parameterType="map">
	    delete from voteResults
	    where userNo = #{userNo}
	      and voteNo = #{voteNo}
	</delete>

	<!-- ==================== 예약 확정 기능 관련 쿼리 ==================== -->
	
	<!-- [예약 1단계] 특정 '투표' 게시글에서 가장 많은 표를 받은 후보(voteNo)를 1개만 조회  -->
	<select id="selectTopVotedVoteNo" parameterType="int" resultType="int">
	    select voteNo
	    from voteResults
	    where voteNo IN (SELECT voteNo FROM votes WHERE postNo = #{postNo})
	    group by voteNo
	    order by count(voteNo) desc
	    limit 1
	</select>
	
	
	<!-- [예약 2단계] voteNo를 이용해, 확정된 후보의 상세 정보(연습실, 날짜, 시간 등)를 조회 -->
	<select id="getVoteOptionDetail" parameterType="int" resultType="com.javaex.vo.TeamVotePostVO">
	    select
	        v.voteNo, s.spaceName, r.roomName, r.roomNo,
	        SUBSTRING_INDEX(SUBSTRING_INDEX(s.address, ' ', 2), ' ', -1) AS address,
	        vo.voteDate, 
	        min(vo.voteTime) as startTime,
	        TIME_FORMAT(ADDTIME(MAX(vo.voteTime), '01:00:00'), '%H:%i') AS endTime,
	        v.totalPrice
	    from votes v
	    join voteOptions vo ON v.voteNo = vo.voteNo
	    join rooms r ON vo.roomNo = r.roomNo
	    join spaces s ON r.spacesNo = s.spacesNo
	    where v.voteNo = #{voteNo}
	    group by v.voteNo, s.spaceName, r.roomName, r.roomNo, s.address, vo.voteDate, v.totalPrice
	</select>
	
	<!-- [최종 저장 1] '연습일정' 타입의 새 게시글을 생성하고, 생성된 PK(teamPostNo)를 파라미터로 받은 VO에 다시 담아줌 -->
	<insert id="insertNewPost" parameterType="com.javaex.vo.TeamPostVO" useGeneratedKeys="true" keyProperty="teamPostNo">
	    insert into posts(teamNo, userNo, teamPostType, teamPostTitle, teamContent, teamWriteDate)
	    values (#{teamNo}, #{userNo}, #{teamPostType}, #{teamPostTitle}, #{teamContent}, now())
	</insert>
	
	<!-- [최종 저장 2] 결제 완료 후, 영수증(recipt) 정보를 DB에 기록 -->
	<insert id="insertReceipt" parameterType="com.javaex.vo.TeamReciptVO">
	    insert into recipt(userNo, roomNo, paymentMethod, phoneNum, reservationTime, voteNo)
	    values (#{userNo}, #{roomNo}, #{paymentMethod}, #{phoneNum}, #{reservationTime}, #{voteNo})
	</insert>
	
	<!-- [최종 저장 3] 원본 '투표' 게시글에 있던 모든 후보들의 상태를 '예약확정(2)'으로 변경하여 더 이상 투표할 수 없도록 막음 -->
	<update id="updateAllVoteStatusInPost" parameterType="map">
	    update voteOptions
	    set voteStatus = #{status}
	    where voteNo IN (select voteNo from votes where postNo = #{postNo})
	</update>
	
	<!-- voteNo로 실제 예약자(결제자) 이름 조회 -->
	<select id="selectReserverNameByVoteNo" parameterType="int" resultType="String">
	    select u.userName
	    from recipt r
	    join users u on r.userNo = u.userNo
	    where r.voteNo = #{voteNo}
	</select>
	
    

</mapper>